#include "ukf.h"
#include "Eigen/Dense"
#include <iostream>

using namespace std;
using Eigen::MatrixXd;
using Eigen::VectorXd;
using std::vector;

/**
 * Initializes Unscented Kalman filter
 * This is scaffolding, do not modify
 */
UKF::UKF() {
  // if this is false, laser measurements will be ignored (except during init)
  use_laser_ = true;

  // if this is false, radar measurements will be ignored (except during init)
  use_radar_ = true;

  // initial state vector
  x_ = VectorXd(5);

  // initial covariance matrix
  P_ = MatrixXd(5, 5);

  // Process noise standard deviation longitudinal acceleration in m/s^2
  //std_a_ = 30;
    std_a_ = 2;
  // Process noise standard deviation yaw acceleration in rad/s^2
  //std_yawdd_ = 30;
  std_yawdd_ = 0.3;
  //DO NOT MODIFY measurement noise values below these are provided by the sensor manufacturer.
  // Laser measurement noise standard deviation position1 in m

  std_laspx_ = 0.15;

  // Laser measurement noise standard deviation position2 in m
  std_laspy_ = 0.15;

  // Radar measurement noise standard deviation radius in m
  std_radr_ = 0.3;

  // Radar measurement noise standard deviation angle in rad
  std_radphi_ = 0.03;

  // Radar measurement noise standard deviation radius change in m/s
  std_radrd_ = 0.3;
  //DO NOT MODIFY measurement noise values above these are provided by the sensor manufacturer.

  /**  TODO:  */

  n_x_ = 5;
  n_aug_ = 7;

  lambda_ = 3 - n_aug_;
  weights_ = VectorXd(2*n_aug_+1);

  Xsig_pred_ = MatrixXd(n_x_,2*n_aug_+1);
  is_initialized_ = false;
  time_us_ = 0;
}

UKF::~UKF() {}

/**
 * @param {MeasurementPackage} meas_package The latest measurement data of
 * either radar or laser.
 */
void UKF::ProcessMeasurement(MeasurementPackage meas_package) {
  /**
  TODO:

  Complete this function! Make sure you switch between lidar and radar
  measurements.
  */

  if(!is_initialized_){

        Xsig_pred_.fill(0.0);
        cout<<"init"<<endl;
        time_us_ = meas_package.timestamp_;

        if (meas_package.sensor_type_ == MeasurementPackage::RADAR) {
                x_ << meas_package.raw_measurements_[0],meas_package.raw_measurements_[1],meas_package.raw_measurements_[2],0,0;
        } else {
            x_ << meas_package.raw_measurements_[0],meas_package.raw_measurements_[1],0,0,0;
        }

        P_ <<     0.0043,   -0.0013,    0.0030,   -0.0022,   -0.0020,
          -0.0013,    0.0077,    0.0011,    0.0071,    0.0060,
           0.0030,    0.0011,    0.0054,    0.0007,    0.0008,
          -0.0022,    0.0071,    0.0007,    0.0098,    0.0100,
          -0.0020,    0.0060,    0.0008,    0.0100,    0.0123;

        is_initialized_ = true;
        return;
  }
    cout<<"c1"<<endl;

  float dt = (meas_package.timestamp_ - time_us_)/1000000.0;
    time_us_ = meas_package.timestamp_;
    Prediction(dt);

    if (meas_package.sensor_type_ == MeasurementPackage::RADAR) {
        UpdateRadar(meas_package);
    } else {
        UpdateLidar(meas_package);
    }
}

/**
 * Predicts sigma points, the state, and the state covariance matrix.
 * @param {double} delta_t the change in time (in seconds) between the last
 * measurement and this one.
 */

void UKF::Prediction(double dt) {

    cout<<"p1"<<endl;

        VectorXd x_aug = VectorXd(n_aug_);
        MatrixXd P_aug = MatrixXd(n_aug_, n_aug_);
        MatrixXd Xsig_aug = MatrixXd(n_aug_, 2 * n_aug_ + 1);
        x_aug << x_,0,0;
        P_aug.topLeftCorner(n_x_,n_x_) = P_;
        P_aug(5,5) = std_a_*std_a_;
        P_aug(6,6) = std_yawdd_*std_yawdd_;
        MatrixXd L = P_aug.llt().matrixL();
        Xsig_aug.col(0)  = x_aug;
        for (int i = 0; i < n_aug_; i++)
        {
            Xsig_aug.col(i+1)       = x_aug + sqrt(lambda_+n_aug_) * L.col(i);
            Xsig_aug.col(i+1+n_aug_) = x_aug - sqrt(lambda_+n_aug_) * L.col(i);
        }
        //Sigma point prediction
        for (int i = 0; i< 2*n_aug_+1; i++)
          {
            //extract values for better readability
            double p_x = Xsig_aug(0,i);
            double p_y = Xsig_aug(1,i);
            double v = Xsig_aug(2,i);
            double yaw = Xsig_aug(3,i);
            double yawd = Xsig_aug(4,i);
            double nu_a = Xsig_aug(5,i);
            double nu_yawdd = Xsig_aug(6,i);

            //predicted state values
            double px_p, py_p;

            //avoid division by zero
            if (fabs(yawd) > 0.001) {
                px_p = p_x + v/yawd * ( sin (yaw + yawd*dt) - sin(yaw));
                py_p = p_y + v/yawd * ( cos(yaw) - cos(yaw+yawd*dt) );
            }
            else {
                px_p = p_x + v*dt*cos(yaw);
                py_p = p_y + v*dt*sin(yaw);
            }

            double v_p = v;
            double yaw_p = yaw + yawd*dt;
            double yawd_p = yawd;

            //add noise
            px_p = px_p + 0.5*nu_a*dt*dt * cos(yaw);
            py_p = py_p + 0.5*nu_a*dt*dt * sin(yaw);
            v_p = v_p + nu_a*dt;

            yaw_p = yaw_p + 0.5*nu_yawdd*dt*dt;
            yawd_p = yawd_p + nu_yawdd*dt;

            //write predicted sigma point into right column
            Xsig_pred_(0,i) = px_p;
            Xsig_pred_(1,i) = py_p;
            Xsig_pred_(2,i) = v_p;
            Xsig_pred_(3,i) = yaw_p;
            Xsig_pred_(4,i) = yawd_p;
          }


        weights_[0] = lambda_/(n_aug_+lambda_);
        for(int i=1;i<2*n_aug_+1;i++)
        {
            weights_[i] = 1/((n_aug_+lambda_)*2);
        }
        x_.fill(0.0);
        for (int i = 0; i < 2 * n_aug_ + 1; i++) {  //iterate over sigma points
            x_ +=  weights_(i) * Xsig_pred_.col(i);
        }
        P_.fill(0.0);
        //predicted state covariance matrix
        for (int i = 0; i < 2 * n_aug_ + 1; i++) {  //iterate over sigma points
            // state difference
            VectorXd x_diff = Xsig_pred_.col(i) - x_;
            //angle normalization
            while (x_diff(3)> M_PI) x_diff(3)-=2.*M_PI;
            while (x_diff(3)<-M_PI) x_diff(3)+=2.*M_PI;
            P_ = P_ + weights_(i) * x_diff * x_diff.transpose() ;
        }
    cout<<"p2"<<endl;
    cout<<"x_ predict:"<<endl<<x_<<endl;
    cout<<"P_ predict:"<<endl<<P_<<endl;
}

/**
 * Updates the state and the state covariance matrix using a laser measurement.
 * @param {MeasurementPackage} meas_package
 */
void UKF::UpdateLidar(MeasurementPackage meas_package) {
  /**
  TODO:

  Complete this function! Use lidar data to update the belief about the object's
  position. Modify the state vector, x_, and covariance, P_.

  You'll also need to calculate the lidar NIS.
  */
  //set measurement dimension, radar can measure r, phi, and r_dot
  int n_z = 2;

  //create matrix for sigma points in measurement space
  MatrixXd Zsig = MatrixXd(n_z, 2 * n_aug_ + 1);
  Zsig.fill(0.0);
  //transform sigma points into measurement space
  for(int i=0;i<2*n_aug_+1;i++){
      Zsig(0,i) = Xsig_pred_(0,i);
      Zsig(1,i) = Xsig_pred_(1,i);
  }

  //mean predicted measurement
  VectorXd z_pred = VectorXd(n_z);
  z_pred.fill(0.0);
  //calculate mean predicted measurement
  for(int i=0; i< 2*n_aug_ + 1; i++){
      z_pred+=weights_(i)*Zsig.col(i);
  }

  //measurement covariance matrix S
  MatrixXd S = MatrixXd(n_z,n_z);
  S.fill(0.0);
  //calculate innovation covariance matrix S
  for(int i=0;i<2*n_aug_+1;i++){
      VectorXd z_diff = Zsig.col(i)-z_pred;

      S+= weights_(i)*( z_diff * z_diff.transpose() );
  }

  //add standard noise
  S(0,0)+=std_laspx_*std_laspx_;
  S(1,1)+=std_laspy_*std_laspy_;

  //create matrix for cross correlation Tc
  MatrixXd Tc = MatrixXd(n_x_, n_z);
  Tc.fill(0.0);

  //calculate cross correlation matrix
  for(int i=0;i<2*n_aug_+1;i++){
      VectorXd x_diff = Xsig_pred_.col(i)-x_;
      VectorXd z_diff = Zsig.col(i)-z_pred;
      Tc+=weights_(i)*( x_diff *z_diff.transpose() );
  }
  //calculate Kalman gain K;
  MatrixXd K = Tc*S.inverse();

  VectorXd z = meas_package.raw_measurements_;
  VectorXd z_diff = z - z_pred;


  x_ = x_ + K*z_diff;
  P_ = P_ - K*S*K.transpose();
}

/**
 * Updates the state and the state covariance matrix using a radar measurement.
 * @param {MeasurementPackage} meas_package
 */

void UKF::UpdateRadar(MeasurementPackage meas_package) {

  cout<<"u1"<<endl;
int n_z = 3;
MatrixXd Zsig = MatrixXd(n_z, 2 * n_aug_ + 1);

  //mean predicted measurement
  VectorXd z_pred = VectorXd(n_z);
  z_pred.fill(0.0);
  //measurement covariance matrix S
  MatrixXd S = MatrixXd(n_z,n_z);
  S.fill(0.0);
  MatrixXd R =  MatrixXd(3,3);
  R.fill(0.0);
  R(0,0)=std_radr_*std_radr_;
  R(1,1)=std_radphi_*std_radphi_;
  R(2,2)=std_radrd_*std_radrd_;
  cout<<"Xsig_pred_"<<endl<<Xsig_pred_<<endl<<endl;

    for(int i=0;i<2*n_aug_+1;i++)
    {
      float px = Xsig_pred_(0,i);
      float py = Xsig_pred_(1,i);
      float v = Xsig_pred_(2,i);
      float yaw = Xsig_pred_(3,i);
      float yawdt = Xsig_pred_(4,i);


        double rho = sqrt(px*px + py*py);
        const bool degenerate = (py == 0.0 && px == 0.0);
        double phi = degenerate ? 0.0 : atan2(py, px);
        double rhodot = (rho > 0.001) ? ( px * v*cos(yaw) + py * v*sin(yaw) ) / rho : 0.0;

     Zsig(0,i) = rho;
     Zsig(1,i) = phi;
     Zsig(2,i) = rhodot;

    }
    cout<<"Zsig"<<endl<<Zsig<<endl;
  //calculate mean predicted measurement
  cout<<"z_pred before:"<<endl<<z_pred<<endl;

  for(int i=0;i<2*n_aug_+1;i++)
  {
      z_pred += weights_(i)*Zsig.col(i);
  }
  //calculate innovation covariance matrix S
  cout<<"z_pred after:"<<endl<<z_pred<<endl;
  for(int i=0;i<2*n_aug_+1;i++)
  {
      VectorXd diff = Zsig.col(i)-z_pred;

      diff(1) = atan2(sin(diff(1)),cos(diff(1)));

      S += weights_(i)*diff*diff.transpose();
  }
     cout<<"S_last"<<endl<<S<<endl;
  S = S+R;
cout<<"S_after"<<endl<<S<<endl;
    MatrixXd Tc = MatrixXd(n_x_, n_z);
  //calculate cross correlation matrix

  for(int i=0;i<2 * n_aug_ + 1;i++)
  {  //2n+1 simga points

    //residual
    VectorXd z_diff = Zsig.col(i) - z_pred;
    //angle normalization
    while (z_diff(1)> M_PI) z_diff(1)-=2.*M_PI;
    while (z_diff(1)<-M_PI) z_diff(1)+=2.*M_PI;

    // state difference
    VectorXd x_diff = Xsig_pred_.col(i) - x_;
    //angle normalization
    while (x_diff(3)> M_PI) x_diff(3)-=2.*M_PI;
    while (x_diff(3)<-M_PI) x_diff(3)+=2.*M_PI;

    Tc = Tc + weights_(i) * x_diff * z_diff.transpose();
  }

  //calculate Kalman gain K;
  MatrixXd K = Tc*S.inverse();
  VectorXd z_diff = meas_package.raw_measurements_ - z_pred;

  while (z_diff(1)> M_PI) z_diff(1)-=2.*M_PI;
  while (z_diff(1)<-M_PI) z_diff(1)+=2.*M_PI;

  //update state mean and covariance matrix
    x_ +=  K*z_diff;
    P_ -= K*S*K.transpose();
     cout<<"u2"<<endl;
     cout<<"x_ update:"<<endl<<x_<<endl;
    cout<<"P_ update:"<<endl<<P_<<endl;

}
